x[1]
x[seq(2, length(x), 2)]
x
rep(c(FALSE, TRUE), 3)
3 // 2
3 / 2
3l/ 2
length(player)
seq(length(player), 2, -2)
c(0, 1, 1) & c(1, 1, 0)
position
factor(position)
1 | 2
0 | 1
(0 | 1) & 1
max(c(1, 2, 3))
max(c(1, 2, 4))
which.max(c(1, 2, 4))
player[which.max(salary)]
points1
c(1, 2) + c(3, 6)
plot(scored, salary)
install.packages(c("ggplot2", "plotly"))
library(plotly)
install.packages(c("ggplot2", "plotly"))
factor(position)
table(factor(position))
table(factor(position)) / 102
player
1+1
load('nba2018-salary-points.RData')
player
four = head(player, n = 4)
four[1]
four[0]
four[-1]
four[-c(1, 2, 3)]
four[5]
four[c(1, 2, 2, 3, 3, 3)]
position_fac = factor(position)
position_fac[team == "GSW"]
position_fac[salary > 15000000]
table(position_fac[salary > 15000000])
prop.table(team[salary])
rm(list)
rm(list())
rm(ls())
rm(list = ls())
cls()
clear()
height = c(6-3)
height
height = c("6-3")
height
c(foo)
height
height = c("foo", "bar")
height
height = c("Hello", "World!")
height
rdata <- "https://github.com/ucb-stat133/stat133-labs/raw/master/data/nba2018-salary-points.RData"
download.file(url = rdata, destfile = '~/Desktop/nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
load('nba2018-salary-points.RData')
cwd()
cd()
getwd()
getwd()
load('nba2018-salary-points.RData')
player[0:3]
rm(list = ls())
help(ls)
weight = c(190)
type(weight)
typeof(weight)
30L
c("foo", "bar", "baz", "bar")
factor(c("foo", "bar", "baz", "bar"))
factor[3]
factor(c("foo", "bar", "baz", "bar"))[3]
position = factor(c("PG", "PF", "PF", "SF", "SG", "C", "PG", "SG", "C", "SG"))
table(position)
count
player == "PG"
position == "PG"
player(position == "PG")
player[position == "PG"]
position[position == "PG"]
sum
average
mean
1 >= 2
quartile(c(1, 2, 3, 4))
quantile(c(1, 2, 3, 4))
typeof(quantile(c(1:8)))
quantile(c(1:8))[0]
quantile(c(1:8))[1]
quantile(c(1:8))[2]
quantile(c(1:8))[3]
quantile(c(1:8))[4]
quantile(c(1:8))[5]
player[which.max(weight)]
number = c(30L, 35L, 23L, 9L, 11L, 27L, 34L, 6L, 3L, 0L)
player = c("Stephen Curry", "Kevin Durant", "Draymond Green", "Andre Iguodala", "Klay Thompson", "Zaza Pachulia", "Shaun Livingston", "Nick Young", "David West", "Patrick McCaw")
position = factor(c("PG", "PF", "PF", "SF", "SG", "C", "PG", "SG", "C", "SG"))
height = c("6-3", "6-9", "6-7", "6-6", "6-7", "6-11", "6-7", "6-7", "6-9", "6-7")
weight = c(190, 240, 230, 215, 215, 270, 192, 210, 250, 185)
birthdate = c("March 14, 1988", "September 29, 1988", "March 4, 1990", "January 28, 1984", "February 8, 1990", "February 10, 1984", "September 11, 1985", "June 1, 1985", "August 29, 1980", "October 25, 1995")
experience = c(8L, 10L, 5L, 13L, 6L, 14L, 12L, 10L, 14L, 1L)
college = c("Davidson College", "University of Texas at Austin", "Michigan State University", "University of Arizona", "Washington State University", NA, NA, "University of SOuthern California", "Xavier University", "University of Nevada, Las Vegas")
player[which.max(weight)]
college[height == "6-6"]
position[which.max(experience)]
number[which.min(weight)]
table(position)
length(player[weight > mean(weight)])
length(player[experience >= 9 & player <= 12])
mean(experience[position == "SG"])
median(weight[position != "C"])
quartile(experience[position == "PF" | position == "SG"])[1]
player[which.max(weight)]
college[height == "6-6"]
position[which.max(experience)]
number[which.min(weight)]
table(position)
length(player[weight > mean(weight)])
length(player[experience >= 9 & player <= 12])
mean(experience[position == "SG"])
median(weight[position != "C"])
quantile(experience[position == "PF" | position == "SG"])[1]
player[which.max(weight)]
college[height == "6-6"]
position[which.max(experience)]
number[which.min(weight)]
table(position)
length(player[weight > mean(weight)])
length(player[experience >= 9 & experience <= 12])
mean(experience[position == "SG"])
median(weight[position != "C"])
quantile(experience[position == "PF" | position == "SG"])[1]
gsw = list(
player = player,
number = number,
position = position,
weight = weight,
experience = experience
)
tyepof(gsw)
typeof(gsw)
gsw[0]
gsw[[0]]
gsw[[1]]
gsw[player]
gsw$player
gsw[[1]]
quantile(1:8)[3]
quantile(1:8)[4]
abs
c(1:8) - 4
gsw$number[which.max(gsw$weight)]
gsw$position[which.min(gsw$experience)]
length(gsw$player[gsw$experience < 8 | gsw$experience > 11])
quantile(gsw$experience[gsw$position == "PF" | gsw$position == "SG"])[4]
weight_deviation = abs(gsw$weight - mean(gsw$weight))
gsw$player[which.max(weight_deviation)]
class(player)
help(TRUE)
typeof(1)
1 + TRUE
"0" > "a"
"0" > "-"
locales
1 + !TRUE
!TRUE
!TRUE + 1
FALSE + !
FAlse +
ex
FALSE + 1
1 + FALSE
!FALSE
!FALSE + 1
1 + !FALSE
!TRUE
!TRUE + 1
TRUE + 1
!2
1 + !TRUE
x = 1:4
x == x[1:4]
x == (x[1:4])
c(1, 2, 3) == c(1, 3, 4)
address(x) == adress(x[1:4])
identical(1, 2)
identical(1, 1)
identical(x, x[1:4])
identical(x, x[1:10])
identical(x, x[1:4])
address(x)
identity(x)
.Internal(inspect(x))
.Internal(inspect(x[1:4]))
x
x[5]
typeof(NA)
seq(1, 3)
typeof(seq(1, 3))
mode(1:3)
%in%
1:10 %in% 1:4
paste(x)
paste(x, collapse = "+")
paste(x, collapse = " + ")
length(paste(x, collapse = ""))
is.na(1:9)
`NA`
NA
NA == NA
matrix(1:9)
matrix(1:9, nrow = 3, ncol = 3)
mat = matrix(1:9, nrow = 3)
mat
mat[1][2]
mat[1, 2]
mat[1]
mat[1, :]
mat[1, 1:3]
mat[1, ]
lord = c("v", "o", "l", "d", "e", "m", "o", "r", "t")
vol = matrix(lord, nrow = 3)
vol[1:2, 2:1]
vol[3:1, ]
vol[,c(1, 2, 2)]
vol[3:1, 3:1]
vol[1:6]
vol[,c(1, 2, 2, 1)]
vol[3:1, c(3, 2, 2, 3)]
vol[3:1, c(3, 2, 2, 3)]
vol[c(3:1, 1:3), c(3, 2, 2, 3)]
vol[c(3:1, 1:3), c(1:3, 3:1)]
vol[c(3:1, 1:3), c(1:3, 3:1)]
cwd()
gwcd()
gedwd()
getwd()
setwd("../OneDrive/School/stat133/lab03)
""
getwd()
setwd("../OneDrive/School/stat133/lab03")
url = "http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data"
download.file(url, "abalone.data")
abalone = read.table("abalone.data", sep = ",")
abalone = read.table("abalone.data", sep = ",")
head(abalone)
str(abalone)
str(abalone, vec.len = 1)
mode(1)
type(1)
typeof(1)
class(1)
character
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c(character, real, real, real, real, real, real, real, integer)
real
real
double
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", real, real, real, real, real, real, real, integer)
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", real, real, real, real, real, real, real, integer)
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", double, double, double, double, double, double, double, integer)
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", numeric, numeric, numeric, numeric, numeric, numeric, numeric, integer)
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
x = c("3", 1)
x
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", "numeric", "numeric", numeric, "numeric", "numeric", "numeric", "numeric", "integer")
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone)
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone)
ablone2 = read.csv("abalone.data")
column_names = c("Sex", "Length", "Diameter", "Height", "Whole", "Shucked", "Viscera", "Shell", "Rings")
column_types = c("factor", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "integer")
abalone = read.table("abalone.data", sep = ",", col.names = column_names, colClasses = column_types)
str(abalone)
abalone2 = read.csv("abalone.data")
str(abalone2)
str(abalone)
summary(abalone)
head(abalone)
teail(abalone)
str(abalone)
summary(abalone)
head(abalone)
tail(abalone)
dim(abalone)
names(abalone)
colnames(abalone)
nrow(abalone)
ncol(abalone)
head(abalone)
typeof(summary(abalone))
typeof(summary(abalone)[1])
summary(abalone)[1]
summary(abalone)[1, 1]
summary(abalone)[1:3]
clasS(summary(abalone))
class(summary(abalone))
summary(table)[1:]
summary(table)[1:100, ]
summary(table)[[1]]
summary(table)[1, 3
]
summary(abalone)[1, ]
summary(abalone)[-1, ]
summary(abalone)[, -1]
summary(abalone)[, -1]
summary(abalone)[c(-2, -4), -1]
summary(abalone)[c(-2, -5), -1]
summary(abalone)[c(-2, -5), ]
abalone[1,]
summary(abalone)[c(-2, -5),-1]
abalone$Rings
summary(abalone)
abalone["foo", ]
1:5
1 % 5
3 %% 5
1:10 %% 3
abalone[-1]
abalone[1:5,]
abalone[1:length(abalone) %% 5 == 0,]
abalone[length(abalone):length(abalone ) - 5]
abalone[1:5,]
seq(100)
-(1:3)
1:5 - 2:3
1:5 - 2:3
abalone[3]
typeof(abalone[3])
typeof(abalone[4])
typeof(abalone[4][5])
abalone[4, 4]
abalone[4,]
abalone[1]
abalone[1, 1]
abalone[c("M")]
abalone[, c("M")]
abalone[, c("Sex")]
abalone[, c("Sex", "Height")]
abalone[1:100, c("Sex", "Height")]
albalone
abalone
abalone[1]
abalone[c(1,1,1,1,1,,1,1)]
abalone[c(1,1,1,1,1,1,1,1)]
abalone[c(1,3)]
abalone[c("Height")]
abalone[c("Rings")]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14, ]
dim(height14)
infant = abalone[abalone$Sex == "I"]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14, ]
dim(height14)
infant = abalone[abalone$Sex == "I",]
male_female = abalone[abalone$Sex == "M" | abalone$Sex == "F"]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14, ]
dim(height14)
infant = abalone[abalone$Sex == "I",]
male_female = abalone[abalone$Sex == "M" | abalone$Sex == "F",]
abalone[abalone$Rings > 25][c("Sex", "Rings")]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14, ]
dim(height14)
infant = abalone[abalone$Sex == "I",]
male_female = abalone[abalone$Sex == "M" | abalone$Sex == "F",]
abalone[abalone$Rings > 25, c("Sex", "Rings")]
abalone[abalone$Rings > 3 & abalone$rings < 6, c("Diameter")]
abalone[1:5,]
abalone[seq(length(abalone)) %% 5 == 0,]
abalone[-seq(length(abalone) - 5),]
height14 = abalone[abalone$Height < 0.14, ]
dim(height14)
infant = abalone[abalone$Sex == "I",]
male_female = abalone[abalone$Sex == "M" | abalone$Sex == "F",]
abalone[abalone$Rings > 25, c("Sex", "Rings")]
abalone[abalone$Rings > 3 & abalone$Rings < 6, c("Diameter")]
typeof(abalone)
class(abalone)
str(abalone)
abalone
abalone$foo = 3
abalone
abalone$foo = NA
abalone
abalone$foo = NULL
abalone
oof = abalone$oof
oof
abalone
data.frame(log_height = log(abies$Height), log_length = log(Abies$Length))
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies3 = data.frame(log_height = log(abies$Height), log_length = log(Abies$Length))
abies3 = data.frame(log_height = log(abies$Height), log_length = log(abies$Length))
abies3
abies3 = abies
abies3
abies3$log_height = log(height)
abies3$log_height = log(abies$Height)
abies3
abies
View(abies)
abalone[abalone$Height < 0.12,]
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$product = abies$Whole * abies$Shucked
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$product = (abalove$Shucked * abalone$Whole)[abalone$Sex == "I"]
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$product = (abalone$Shucked * abalone$Whole)[abalone$Sex == "I"]
abies3 = data.frame(log_height = log(abies$Height), log_length = log(abies$Length))
abalone[order(abalone$Height),][abalone$Height < 0.12, ]
abalone[order(abalone$Height, decreasing = TRUE), c("Sex", "Diamater", "Rings")][1:5,]
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$product = (abalone$Shucked * abalone$Whole)[abalone$Sex == "I"]
abies3 = data.frame(log_height = log(abies$Height), log_length = log(abies$Length))
abalone[order(abalone$Height),][abalone$Height < 0.12, ]
abalone[order(abalone$Height, decreasing = TRUE), c("Sex", "Diameter", "Rings")][1:5,]
abalone[order(abalone$Length, decreasing = TRUE), c("Sex", "Diameter", "Rings")][1:5,]
seq(100) %% 5 == 0
-seq(95)
1:100[-1:95]
1:100[-(1:95)]
1:100[-seq(95)]
(1:100)[-seq(95)]
abalone[-seq(length(abalone) - 5),]
abalone[-(seq(length(abalone) - 5)),]
abalone[-(seq(length(abalone))),]
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$product = (abalone$Shucked * abalone$Whole)[abalone$Sex == "I"]
abies3 = data.frame(log_height = log(abies$Height), log_length = log(abies$Length))
abalone[abalone$Height < 0.12, ][order(Height)]
order(abalone$Height)
1:4[1:10 %% 2 == 0]
1:10 %% 2
1:10 %% 2 == 0
1:5[1:10 %% 2 == 0]
seq(1:100)
-seq(1:100)
1:100[-seq(1:95)]
1:100(1:3)
1:100[1:3]
(1:100)[1:3]
(1:100)[-seq(1:95)]
abalone[-seq(abalone(length) - 5)]
abalone[-seq(length(abalone) - 5)]
abalone[-seq(length(abalone) - 5)]
length(abalone) -5
length(abalone)
dim(abalone)
dim(abalone)[0]
dim(abalone)[1]
nrows(abalone)
nrow(abalone)
summary(abalone)[c(-2, -5),-1]
summary(abalone)[,c("Diamater" : "Rings")]
summary(abalone)[,"Diamater" : "Rings"]
summary(abalone)[, "Sex"]
summary(abalone)[, -"Sex"]
summary(abalone)[, "Sex"=NULL]
summary(abalone)[, "Sex":=NULL]
summary(abalone)[, Sex=NULL]
summary(abalone)[, -1]
summary(abalone)[c(-2, -5), -1]
abies = abalone[abalone$Sex == 'I', c('Length', 'Height', 'Diameter')]
abies$product = (abalone$Shucked * abalone$Whole)[abalone$Sex == "I"]
abies3 = data.frame(log_height = log(abies$Height), log_length = log(abies$Length))
abalone[order(abalone$Height), ][abalone$Height < 0.12, ]
abalone[order(abalone$Height, decreasing = TRUE), c("Sex", "Diameter", "Rings")][1:5,]
abalone[order(abalone$Length, decreasing = TRUE), c("Sex", "Diameter", "Rings")][1:5,]
